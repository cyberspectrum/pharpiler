<?php

/**
 * This file is part of cyberspectrum/pharpiler.
 *
 * (c) Christian Schiffler <c.schiffler@cyberspectrum.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * This project is provided in good faith and hope to be usable by anyone.
 *
 * @package    cyberspectrum/pharpiler
 * @author     Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @copyright  2015 Christian Schiffler <c.schiffler@cyberspectrum.de>
 * @license    https://github.com/cyberspectrum/pharpiler/blob/master/LICENSE MIT
 * @link       https://github.com/cyberspectrum/pharpiler
 * @filesource
 */

namespace CyberSpectrum\PharPiler\AutoloadOptimizer;

/**
 * This class dumps the autoload information.
 */
class AutoloadDumper
{
    /**
     * The alias hash to use.
     *
     * @var string
     */
    private $alias;

    /**
     * The optimizer to use.
     *
     * @var AutoloadInformationOptimizer
     */
    private $optimizer;

    /**
     * Create a new instance.
     *
     * @param AutoloadInformationOptimizer $optimizer The optimizer to use.
     */
    public function __construct($optimizer)
    {
        $this->alias = uniqid();
        $this->optimizer = $optimizer;
    }

    /**
     * Retrieve the vendor/autoload_real.php
     *
     * @return string
     */
    public function getAutoloadReal()
    {
        $file = <<<HEADER
<?php
// autoload_real.php @generated by Pharpiler

class ComposerAutoloaderInit{$this->alias}
{
    private static \$loader;

    public static function loadClassLoader(\$class)
    {
        if ('Composer\Autoload\ClassLoader' === \$class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::\$loader) {
            return self::\$loader;
        }

        \$baseDir = \Phar::running();
        \$vendorDir = \$baseDir . '/vendor';

        spl_autoload_register(array('ComposerAutoloaderInit{$this->alias}', 'loadClassLoader'), true, true);
        self::\$loader = \$loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit{$this->alias}', 'loadClassLoader'));

HEADER;

        if ('[]' !== ($includePaths = $this->serializeArray($this->optimizer->getIncludePaths()))) {
            $file .= <<<INCLUDEPATH
        set_include_path(join(PATH_SEPARATOR, $includePaths));

INCLUDEPATH;
        }

        if ('[]' !== ($psr0 = $this->serializeArray($this->optimizer->getPsr0()))) {
            $file .= <<<PSR0
        foreach ($psr0 as \$namespace => \$path) {
            \$loader->set(\$namespace, \$path);
        }

PSR0;
        }

        if ('[]' !== ($psr4 = $this->serializeArray($this->optimizer->getPsr4()))) {
            $file .= <<<PSR4
        foreach ($psr4 as \$namespace => \$path) {
            \$loader->setPsr4(\$namespace, \$path);
        }

PSR4;
        }

        if ('[]' !== ($classMap = $this->serializeArray($this->optimizer->getClassmap()))) {
            $file .= <<<INCLUDEPATH
        \$loader->addClassMap($classMap);

INCLUDEPATH;
        }

        $file .= '        $loader->register(true);';

        if ($autoLoadFiles = $this->optimizer->getAutoloadFiles()) {
            foreach ($autoLoadFiles as $autoLoadFile) {
                $file .= "composerRequire{$this->alias}($autoLoadFile);\n";
            }
        }

        $file .= <<<EOF

        return \$loader;
    }
}

function composerRequire{$this->alias}(\$file)
{
    require \$file;
}

EOF;
        return $file;
    }

    /**
     * Return the vendor/autoload.php
     *
     * @return string
     */
    public function getAutoload()
    {
        return <<<EOF
<?php
// autoload.php @generated by Pharpiler.
require_once __DIR__ . '/composer' . '/autoload_real.php';
return ComposerAutoloaderInit{$this->alias}::getLoader();

EOF;
    }

    /**
     * Serialize an array to short noted string representation.
     *
     * @param array $array The array.
     *
     * @return string
     */
    private function serializeArray($array)
    {
        $result = [];
        foreach ($array as $key => $value) {
            if (is_array($value)) {
                $result[] = var_export($key, true) . ' => ' . $this->serializeArray($value);

                continue;
            }

            if (!is_numeric($key)) {
                $result[] = var_export($key, true) . ' => ' . $this->valueToString($value);

                continue;
            }

            $result[] = $this->valueToString($value);
        }

        return '[' . join(",\n", $result) . ']';
    }

    /**
     * Convert a value to string and replace certain mappings.
     *
     * @param mixed $value The value to convert.
     *
     * @return string
     */
    private function valueToString($value)
    {
        return str_replace(
            [
                '\'@@BASEDIR@@/vendor',
                '\'@@BASEDIR@@'
            ],
            [
                '$vendorDir . \'',
                '$baseDir . \''
            ],
            var_export($value, true)
        );
    }
}
